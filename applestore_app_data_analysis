CREATE TABLE appleStore_description_combined AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4


**EXPLORATORY DATA ANALYSIS**

-- Check the number of unique apps in both tablesAppleSoterAppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIDs
FROM AppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIDs
FROM appleStore_description_combined

--Check for any missing values in key fields

SELECT COUNT(*) as MissingValues
from AppleStore
WHERE track_name is NULL or user_rating is NULL or prime_genre IS NULL

SELECT COUNT(*) as MissingValues
from appleStore_description_combined
WHERE app_desc is NULL

--Find out the number of apps per genreAppleStore

SELECT prime_genre, COUNT(*) as NumApps
FROM AppleStore
group by prime_genre
order by NumApps DESC

--Get an overview of the apps' ratingsAppleStore

SELECT min(user_rating) as MinRating,
	   max(user_rating) as MaxRating,
       avg(user_rating) as AvgRating
FROM AppleStore

-- Get the distribution of app pricesAppleStore
SELECT
	(price / 2) *2 AS PriceBinStart,
	((price / 2) *2) +2 AS PriceBinEnd,
    COUNT(*) AS NumApps
from AppleStore
     
GROUP by PriceBinStart
Order By PriceBinEnd

**DATA ANALYSIS**AppleStore

--Determine whether paid apps have higher ratings than free appsAppleStore

SELECT CASE
			WHEN price	 > 0 then 'Paid'
            else 'Free'
		END as App_type,
        avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP BY App_Type

-- Check if apps with more supported langugages have higher ratingsAppleStore

SELECT CASE
			WHEN lang_num < 10 THEN '<10 languages'
            WHEN lang_num BETWEEN 10 AND 30 THEN '<10-30 languages'
            ELSE '>30 languages'
		End as language_bucket,
        Avg(user_rating) AS Avg_Rating
FROM AppleStore
GROUP by language_bucket
order by Avg_Rating DESC

-- Check genres with low ratings

SELECT prime_genre,
		Avg(user_rating) AS Avg_Rating
From AppleStore
GROUP BY prime_genre
ORDER BY Avg_Rating ASC
limit 10

-- Check if there is correlation between the length of the 
-- app description and the user ratingAppleStore

SELECT CASE
			when length(b.app_desc) <500 then 'Short'
            WHEN length(b.app_desc) BETWEEN 500 and 1000 then 'Medium'
            else 'Long'
		ENd AS description_length_bucket,
        avg(a.user_rating) as average_rating
    
FROM
	 AppleStore as a
JOIN
	appleStore_description_combined AS b
ON
	a.id = b.id

GROUP by description_length_bucket
order BY average_rating DESC

--Check the top-rated apps for each genreAppleStore

SELECT
	prime_genre,
    track_name,
    user_rating
FROM (
  	  SELECT
  	  prime_genre,
      track_name,
  	  user_rating,
  	  RANK() OVER(PARTITION BY prime_genre ORDER by user_rating DESC, rating_count_tot DESC) as rank
  	  FROM
  	  AppleStore
  	 ) As a
WHERE
a.rank = 1
